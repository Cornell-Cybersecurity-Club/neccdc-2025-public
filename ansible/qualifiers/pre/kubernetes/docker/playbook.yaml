---
- name: K8s base
  hosts: all
  become: true
  vars:
    kubelet_config: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
  tasks:
    - name: Update APT packages
      ansible.builtin.apt:
        update_cache: true

    - name: Setup docker
      ansible.builtin.include_tasks:
        file: "tasks/docker.yaml"

    - name: Setup kubernetes base configuration
      ansible.builtin.include_tasks:
        file: "../shared/kubernetes_base.yaml"

    - name: Check Kubelet args in Kubelet config
      ansible.builtin.shell:
        cmd: grep "^Environment=\"KUBELET_EXTRA_ARGS=" {{ kubelet_config  }} || true
      register: check_args

    - name: Add runtime args in Kubelet config
      ansible.builtin.lineinfile:
        dest: "{{ kubelet_config }}"
        line: "Environment=\"KUBELET_EXTRA_ARGS=--container-runtime-endpoint=unix:///var/run/cri-dockerd.sock\""
        insertafter: '\[Service\]'
      when: check_args.stdout == ""

    - name: Setup kubeadm config file
      ansible.builtin.blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: InitConfiguration
          nodeRegistration:
            criSocket: unix:///var/run/cri-dockerd.sock
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          runtimeRequestTimeout: "15m"
          cgroupDriver: "systemd"
          systemReserved:
            cpu: 100m
            memory: 350M
          kubeReserved:
            cpu: 100m
            memory: 50M
          enforceNodeAllocatable:
            - pods

    - name: Mount longhorn volume
      ansible.builtin.include_tasks:
        file: "../shared/longhorn_volume.yaml"


- name: K8s users
  hosts: all
  become: true
  vars:
    former_employees_data: "{{ lookup('file', '../../../../../documentation/employee_data/former_employees.yaml') | from_yaml }}"
    users_data: "{{ lookup('file', '../../../../../documentation/employee_data/employees.yaml') | from_yaml }}"
  tasks:
    - name: Loop through users and create groups
      ansible.builtin.group:
        name: it
        state: present
      tags:
        - users

    - name: Create IT users
      ansible.builtin.user:
        name: "{{ item.username | regex_replace(' ', '.') | lower }}"
        password: "{{ item.password | password_hash('sha512') }}"
        append: true
        groups: "users,it{% if item.position == 'System Administrator' %},sudo{% endif %}"
        shell: '/bin/bash'
        state: present
      when: item.department == "IT"
      with_items: "{{ users_data.users }}"
      tags:
        - users

    - name: Create former system admin employee account
      ansible.builtin.user:
        name: "{{ item.username | regex_replace(' ', '.') | lower }}"
        password: "{{ item.password | password_hash('sha512') }}"
        append: true
        groups: "users,it,sudo"
        shell: '/bin/bash'
        state: present
      when: item.position == "System Administrator"
      with_items: "{{ former_employees_data.users }}"
      tags:
        - users

    - name: Setup blackteam task
      ansible.builtin.include_tasks:
        file: "../../../../shared/black_team/main.yaml"
      vars:
        black_team_password: example-password
        black_team_pub_path: '../../../../../documentation/black_team/black-team.pub'
        ssh_service_name: ssh
      tags:
        - black-team
