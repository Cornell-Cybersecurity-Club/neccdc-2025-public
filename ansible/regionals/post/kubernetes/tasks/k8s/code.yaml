---
- name: Create code PVC
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: code
        namespace: infrastructure
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 512Mi
        storageClassName: longhorn
  tags:
    - services
    - code

- name: Create initialization workspace job
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: code-init
        namespace: infrastructure
      spec:
        template:
          spec:
            restartPolicy: Never
            containers:
              - name: init
                image: busybox
                command: ["/bin/sh", "-c"]
                args:
                  - |
                    wget -O /workspace/insecure_old.yaml https://raw.githubusercontent.com/NE-Collegiate-Cyber-Defense-League/neccdc-2024-public/refs/heads/main/ansible/regionals/post/kubernetes/tasks/code.yaml
                    printf "# PlaceboPharma Internal Development Platform\n\n" > /workspace/README.md
                    echo "## The ultimate development platform" >> /workspace/README.md
                    echo "Get your work done even from your phone" >> /workspace/README.md
                    printf "\n## Resources:\n- [Kubernetes](https://kubernetes.io/docs/tutorials/kubernetes-basics/)\n- [Teleport](https://goteleport.com/how-it-works/)\n- [InfluxDB](https://docs.influxdata.com/influxdb/v2/get-started/)\n" >> /workspace/README.md
                    mkdir /workspace/pipeline
                    printf "#!/bin/bash\nkubectl get pods -n pipeline -o wide --watch" > /workspace/pipeline/monitor.sh
                    printf ".env" > /workspace/pipeline/.dockerignore
                    printf 'FROM gcr.io/distroless/static-debian12:latest\nWORKSPACE /app\n\nCOPY app.bin /app/app\nCOPY app.conf /app/init.conf\n\nENTRYPOINT ["/app/app"]' > /workspace/pipeline/Dockerfile
                    wget -O /workspace/environment.pdf https://neccdl.org/history/2025/resources/Regionals-Packet-NECCDC-2025.pdf
                    printf ".DS_Store" > /workspace/.gitignore
                    mkdir /workspace/.git
                    printf "ref: refs/heads/regionals-kubernetes" > /workspace/.git/HEAD
                volumeMounts:
                  - mountPath: "/workspace"
                    name: workspace
            volumes:
              - name: workspace
                persistentVolumeClaim:
                  claimName: code
  tags:
    - services
    - code

- name: Create code server service account
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: code
        namespace: infrastructure
  tags:
    - services
    - code

- name: Create code cluster role to list pods
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: read-only
      rules:
        - apiGroups:
            - ""
          resources:
            - "*"
          verbs:
            - "list"
            - "get"
  tags:
    - services
    - code

- name: Create code server account policy binding
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: code-read-only
        namespace: infrastructure
      subjects:
        - kind: ServiceAccount
          name: code
          namespace: infrastructure
      roleRef:
        kind: ClusterRole
        name: read-only
        apiGroup: rbac.authorization.k8s.io
  tags:
    - services
    - code

- name: Create code server service
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: code-server
        namespace: infrastructure
        annotations:
          teleport.dev/name: code
          teleport.dev/port: '8443'
        labels:
          teleport.dev/proxy: "true"
      spec:
        selector:
          app: code-server
        ports:
          - port: 8443
            targetPort: 8443
  tags:
    - services
    - code

- name: Create code server network policy
  become: true
  become_user: ubuntu
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        name: code
        namespace: infrastructure
      spec:
        podSelector:
          matchLabels:
            app: code-server
        policyTypes:
          - Egress
        egress:
          - to:
              - namespaceSelector: {}
                podSelector:
                  matchLabels:
                    k8s-app: kube-dns
            ports:
              - port: 53
                protocol: UDP
          - to:
              - namespaceSelector: {}
          - to:
              - ipBlock:
                  cidr: 0.0.0.0/0
            ports:
              - port: 443
  tags:
    - services
    - code
