---
- name: Kubernetes CRI-O Base
  hosts: packer
  become: true
  vars:
    former_employees_data: "{{ lookup('file', '../../../../../documentation/employee_data/former_employees.yaml') | from_yaml }}"
    users_data: "{{ lookup('file', '../../../../../documentation/employee_data/employees.yaml') | from_yaml }}"
  tasks:
    - name: Install Teleport
      ansible.builtin.include_tasks:
        file: "../shared/teleport.yaml"
      tags:
        - teleport

    - name: Install CRI-O
      block:
        - name: Add CRI-O apt key
          ansible.builtin.apt_key:
            url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/Release.key
            state: present

        - name: Add CRI-O repository
          ansible.builtin.apt_repository:
            repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/ /
            state: present
            filename: devel:kubic:libcontainers:stable

        - name: Add CRI-O Kubernetes repository
          ansible.builtin.apt_repository:
            repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.24/xUbuntu_22.04/ /
            state: present
            filename: devel:kubic:libcontainers:stable:cri-o:1.24

        - name: Install CRI-O and dependencies
          ansible.builtin.apt:
            name:
              - cri-o
              - cri-o-runc
              - cri-tools
              - containernetworking-plugins
            state: present
            update_cache: true

        - name: Enable and start CRI-O service
          ansible.builtin.systemd:
            name: crio
            state: started
            enabled: true

    - name: Crictl completion
      block:
        - name: Install Crictl bash completion
          ansible.builtin.command: crictl completion bash
          register: crictl_completion
          changed_when: false

        - name: Create Crictl bash completion file
          ansible.builtin.copy:
            content: "{{ crictl_completion.stdout_lines | join('\n') }}"
            dest: /etc/bash_completion.d/crictl
            owner: root
            group: root
            mode: '0644'

    - name: Setup kubernetes base configuration
      ansible.builtin.include_tasks:
        file: "../shared/kubernetes_base.yaml"

    - name: Setup kubeadm config file
      ansible.builtin.blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: InitConfiguration
          nodeRegistration:
            criSocket: unix:///var/run/crio/crio.sock
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          runtimeRequestTimeout: "15m"
          cgroupDriver: "systemd"
          systemReserved:
            cpu: 100m
            memory: 350M
          kubeReserved:
            cpu: 100m
            memory: 50M
          enforceNodeAllocatable:
            - pods

    - name: Mount longhorn volume
      ansible.builtin.include_tasks:
        file: "../shared/longhorn_volume.yaml"

    - name: Loop through users and create groups
      ansible.builtin.group:
        name: "{{ item | regex_replace(' ', '-') | lower }}"
        state: present
      with_items:
        - 'Compliance'
        - 'IT'
      tags:
        - users

    - name: Create compliance users
      ansible.builtin.user:
        name: "{{ item.username | regex_replace(' ', '.') | lower }}"
        password: "{{ item.password | password_hash('sha512') }}"
        append: true
        groups: users,compliance
        shell: '/bin/bash'
        state: present
      when: item.department == "Compliance"
      with_items: "{{ users_data.users }}"
      tags:
        - users

    - name: Create IT users
      ansible.builtin.user:
        name: "{{ item.username | regex_replace(' ', '.') | lower }}"
        password: "{{ item.password | password_hash('sha512') }}"
        append: true
        groups: "users,it{% if item.position == 'System Administrator' %},sudo{% endif %}"
        shell: '/bin/bash'
        state: present
      when: item.department == "IT"
      with_items: "{{ users_data.users }}"
      tags:
        - users

    - name: Create former system admin employee account
      ansible.builtin.user:
        name: "{{ item.username | regex_replace(' ', '.') | lower }}"
        password: "{{ item.password | password_hash('sha512') }}"
        append: true
        groups: "users,it,sudo"
        shell: '/bin/bash'
        state: present
      when: item.position == "System Administrator"
      with_items: "{{ former_employees_data.users }}"
      tags:
        - users

    - name: Setup blackteam task
      ansible.builtin.include_tasks:
        file: "../../../../shared/black_team/main.yaml"
      vars:
        black_team_password: example-password
        black_team_pub_path: '../../../../../documentation/black_team/black-team.pub'
        ssh_service_name: ssh
      tags:
        - black-team
